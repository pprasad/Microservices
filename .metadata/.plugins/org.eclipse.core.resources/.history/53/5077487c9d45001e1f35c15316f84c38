package com.zensar.springapplication.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zensar.springapplication.dto.CustomerDTO;
import com.zensar.springapplication.entity.Customer;
import com.zensar.springapplication.repository.CustomerRepository;

import jakarta.annotation.PostConstruct;

@Service
public class CustomerServiceImpl implements CustomerService {
	
	
	
	
	@Autowired
	private CustomerRepository customerRepository;

	@Autowired
	private ModelMapper mapper;

	@Override
	public CustomerDTO getCustomer(int customerId) {
		
		
		Optional<Customer> optionalCustomer = customerRepository.findById(customerId);
		
	
		
		if(optionalCustomer.isPresent()) {
			Customer customer = customerRepository.findById(customerId).get();
		}else {
			throw new RuntimeException("Customer Not Found with given Id");
		}

				
				customerRepository.findById(customerId).get();
		// CustomerDTO customerDTO = mapToDto(customer);

		return mapper.map(customer, CustomerDTO.class);

	}

	@Override
	public List<CustomerDTO> getAllCustomers() {
		List<CustomerDTO> dtos = new ArrayList<>();
		List<Customer> allCustomers = customerRepository.findAll();

		for (Customer customer : allCustomers) {
			dtos.add(mapper.map(customer, CustomerDTO.class));
		}

		return dtos;
	}

	@Override
	public CustomerDTO acceptCustomer(CustomerDTO customerDto) {

		// Customer customer = mapTOEnity(customerDto);
		
		//TypeMap<CustomerDTO, Customer> typeMap = mapper.createTypeMap(CustomerDTO.class, Customer.class);
		//typeMap.addMapping(CustomerDTO::getId, Customer::setCustomerId);
	
		Customer customer = customerRepository.save(mapper.map(customerDto, Customer.class));
		System.out.println("Customer DTO" + customerDto);
		System.out.println("Customer Entity " + customer);

		return mapper.map(customer, CustomerDTO.class);
	}

	@Override
	public void deleteCustomer(int customerId) {
		customerRepository.deleteById(customerId);
	}

	@Override
	public Customer updateCustomer(int customerId, Customer customer) {
		return customerRepository.save(customer);
	}
	
	
	
	public List<Customer> getCustomerByItsName(String customerName){
		return customerRepository.test(customerName);
	}

	/*
	 * private Customer mapTOEnity(CustomerDTO customerDto) {
	 * 
	 * Customer customer = new Customer();
	 * customer.setCustomerId(customerDto.getCustomerId());
	 * customer.setCustomerName(customerDto.getCustomerName());
	 * customer.setCustomerAge(customerDto.getCustomerAge());
	 * 
	 * return customer;
	 * 
	 * }
	 * 
	 * private CustomerDTO mapToDto(Customer customer) { CustomerDTO customerDTO =
	 * new CustomerDTO();// 50 customerDTO.setCustomerId(customer.getCustomerId());
	 * customerDTO.setCustomerName(customer.getCustomerName());
	 * customerDTO.setCustomerAge(customer.getCustomerAge()); return customerDTO; }
	 */

}
