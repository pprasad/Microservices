package com.zensar.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.HttpSecurityBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public UserDetailsManager userDetailsManager(PasswordEncoder passwordEncoder) {
		//UserDetails admin = User.withUsername("tom").password("tom@123").roles("ADMIN").build();
	//	UserDetails admin = User.withUsername("tom").password(passwordEncoder().encode("tom@123")).roles("ADMIN").build();
		UserDetails admin = User.withUsername("tom").password(passwordEncoder.encode("tom@123")).roles("ADMIN").build();
	//	UserDetails user = User.withUsername("jerry").password("jerry@123").roles("USER").build();
		UserDetails user = User.withUsername("jerry").password(passwordEncoder.encode("jerry@123")).roles("USER").build();
		return new InMemoryUserDetailsManager(admin, user);
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		//return NoOpPasswordEncoder.getInstance();
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public SecurityFilterChain  securityFilterChain(HttpSecurity  http) {
		CsrfConfigurer<HttpSecurityBuilder<H>> HI=null;
		
		return http.csrf(csrf-> csrf.disable() )
				.authorizeHttpRequests(auth -> auth.requestMatchers("/").permitAll());
	}
	
	

}
